use std::str::FromStr;
use crate::parser::numeric_literals;
use crate::types::Type;
use crate::ast::expressions::{Expr, Expression, Op};
use crate::ast::statements::{Stmt, Statement};
use crate::ast::node::Node;

grammar;

pub File: Stmt = {
    <s:@L> <mut v:(<TopLevelStatement>)*> <e:@R> => Node::new(Statement::Block(v), (s, e)),
};

TopLevelStatement: Stmt = {
    FunctionDefinition,
    FunctionDeclaration,
}

FunctionDeclaration: Stmt = {
    <s:@L> "declare" "fn" <name:Identifier> "(" <args:List<TypedIdentifier>> ")" "->" <return_type:Typ> <e:@R> => Node::new(Statement::FunctionDeclaration {name, args, return_type}, (s,e))
}

FunctionDefinition: Stmt = {
    <s:@L> "fn" <name:Identifier> "(" <args:List<TypedIdentifier>> ")" "->" <return_type:Typ> <body:Block> <e:@R> => Node::new(Statement::Function {name, args, return_type, body}, (s,e))
};

TypedIdentifier: (Expr, Expr) = {
    <Identifier> ":" <Typ>
};

Statement: Stmt = {
    <s:@L> "let" <name:Identifier> "=" <value: Expr> ";" <e:@R> => Node::new(Statement::Let { name, value }, (s, e)),
    <s:@L> <expr:Expr> ";" <e:@R> => Node::new(Statement::Expression(expr), (s, e)),
    IfStatement,
    Block,
    <s:@L> "return" <expr:Expr?> ";" <e:@R> => Node::new(Statement::Return(expr), (s, e)),
};

IfStatement: Stmt = {
    <s:@L> "if" <condition:Expr> <body:Block> <otherwise:ElseClause?> <e:@R> => Node::new(Statement::If { condition, body, otherwise }, (s, e)),
};

ElseClause: Stmt = {
    "else" <IfStatement>,
    "else" <Block>,
};

Block: Stmt = {
    <s:@L> "{" <mut v:(<Statement>)*> "}" <e:@R> => Node::new(Statement::Block(v), (s, e)),
};

Expr = {
    #[precedence(level="1")]
    Term,

    #[precedence(level="2")] #[assoc(side="left")]
    <start:@L> <lhs:Expr> <op:Multiplicative> <rhs:Expr> <end:@R> =>
        Node::new(Expression::Infix { lhs, op, rhs }, (start, end)),

    #[precedence(level="3")] #[assoc(side="left")]
    <start:@L> <lhs:Expr> <op:Additive> <rhs:Expr> <end:@R> =>
        Node::new(Expression::Infix { lhs, op, rhs }, (start, end)),

    #[precedence(level="4")] #[assoc(side="left")]
    <start:@L> <lhs:Expr> <op:Comparative> <rhs:Expr> <end:@R> =>
        Node::new(Expression::Infix { lhs, op, rhs }, (start, end)),

    #[precedence(level="5")] #[assoc(side="left")]
    <start:@L> <lhs:Expr> <op:Equivalence> <rhs:Expr> <end:@R> =>
        Node::new(Expression::Infix { lhs, op, rhs }, (start, end)),

    #[precedence(level="6")] #[assoc(side="left")]
    <start:@L> <lhs:Expr> <op:LogicalConjunction> <rhs:Expr> <end:@R> =>
        Node::new(Expression::Infix { lhs, op, rhs }, (start, end)),

    #[precedence(level="7")] #[assoc(side="left")]
    <start:@L> <lhs:Expr> <op:LogicalAlternative> <rhs:Expr> <end:@R> =>
        Node::new(Expression::Infix { lhs, op, rhs }, (start, end)),

    #[precedence(level="8")] #[assoc(side="right")]
    <start:@L> <lhs:Lvalue> <op:ShortAssignment> <rhs:Expr> <end:@R> =>
        Node::new(Expression::Infix { lhs, op, rhs }, (start, end)),
};

List<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Lvalue = {
    Identifier,
    <s:@L> <lhs:Identifier> "[" <rhs:Expr> "]" <e:@R> => Node::new(Expression::IndexAccess { lhs, rhs }, (s, e)),
    <s:@L> <lhs:Lvalue> "(" <args:List<Expr>> ")" <e:@R> => Node::new(Expression::Call { lhs, args }, (s, e)),
    <s:@L> <lhs:Lvalue> "." <rhs:Identifier> <e:@R> => Node::new(Expression::FieldAccess { lhs, rhs, dereferenced: false }, (s, e)),
    <s:@L> <lhs:Lvalue> "->" <rhs:Identifier> <e:@R> => Node::new(Expression::FieldAccess { lhs, rhs, dereferenced: true }, (s, e)),
}

Additive: Op = {
    "+" => Op::Plus,
    "-" => Op::Minus,
}

Multiplicative: Op = {
    "*" => Op::Asterisk,
    "/" => Op::Slash,
    "%" => Op::Modulo
}

Equivalence: Op = {
    "!=" => Op::Neq,
    "==" => Op::Eq
}

Comparative: Op = {
    ">" => Op::Gt,
    "<" => Op::Lt,
    "<=" => Op::Lte,
    ">=" => Op::Gte,
}

ShortAssignment: Op = {
    "=" => Op::Assign,
    "+=" => Op::PlusAssign,
    "-=" => Op::MinusAssign,
    "/=" => Op::SlashAssign,
    "*=" => Op::AsteriskAssign,
    "%=" => Op::ModuloAssign,
}

LogicalAlternative: Op = {
    "||" => Op::LogicalOr,
}

LogicalConjunction: Op = {
    "&&" => Op::LogicalAnd,
}

Term = {
    Lvalue,
    BinaryInteger,
    DecimalInteger,
    True,
    False,
    "(" <t:Expr> ")" => t,
};

Typ: Expr = {
    <s:@L> <t:RawTyp> <e:@R> => Node::new(Expression::Type(t), (s, e))
}

RawTyp = {
    Int64,
    Int32,
    Int,
    Nothing,
}

Int64:    Type = { "i64" => Type::Int64 }
Int32:    Type = { "i32" => Type::Int32 }
Int:      Type = { "int" => Type::Int }
Nothing:  Type = { "Nothing" => Type::Nothing }

BinaryInteger: Expr = <s:@L> <v:r"0[bB][01]([_']?[01])*([ui](64|32))?"> <e:@R> => Node::new(numeric_literals::binary_integer(v), (s, e));
DecimalInteger: Expr = <s:@L> <v:r"0|[1-9]([_']?[0-9])*([ui](64|32))?"> <e:@R> => Node::new(numeric_literals::decimal_integer(v), (s, e));
True: Expr = <s:@L> "true" <e:@R> => Node::new(Expression::Boolean(true), (s, e));
False: Expr = <s:@L> "false" <e:@R> => Node::new(Expression::Boolean(false), (s, e));

Identifier: Expr = <s:@L> <v:r"[a-zA-Z_]+[a-zA-Z0-9_]*"> <e:@R> => Node::new(Expression::Identifier(v.into()), (s, e));
